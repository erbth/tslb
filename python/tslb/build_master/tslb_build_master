#!/usr/bin/python3
import asyncio
import os
import signal
import socket
from tslb import settings
from tslb.build_master import BuildMaster


# Store the BuildMaster instance in a global variable
bm = None

def signal_handler(bm):
    loop = asyncio.get_running_loop()

    if bm:
        loop.create_task(bm.request_quit())
    else:
        exit(1)

class LoopStopReason:
    def __init__(self, initial=0):
        self._stop_code = initial

    def get_code(self):
        return self._stop_code

    def set_code(self, code):
        self._stop_code = code


async def init(loop, lsr, yamb_hub_transport_address, identity):
    global bm

    # Construct a BuildMaster
    bm = BuildMaster(loop, lsr, yamb_hub_transport_address, identity)
    loop.add_signal_handler(signal.SIGTERM, signal_handler, bm)
    loop.add_signal_handler(signal.SIGINT, signal_handler, bm)

    await bm.connect_to_yamb_hub()


def main():
    print("TSClient LEGACY Build System Build Master - starting", flush=True)

    # Parse configuration data.
    if 'Yamb' not in settings:
        print("Missing section `Yamb' in system configuration files.")
        return 1

    yamb_hub_transport_address = settings['Yamb'].get('hub', None)
    if not yamb_hub_transport_address:
        print("No yamb hub transport address specifies in the system configuartion file.")
        return 1

    loop = asyncio.new_event_loop()

    lsr = LoopStopReason()

    # Find an identity for this build master
    identity = "%s:%d" % (socket.gethostname(), os.getpid())
    print("Own identity: %s" % identity, flush=True)

    # Control flow changes into the loop
    loop.create_task(init(loop, lsr, yamb_hub_transport_address, identity))

    # The asyncio main loop - control over the loop is given to the BuildMaster
    # object by now.
    loop.run_forever()

    return lsr.get_code()


if __name__ == '__main__':
    exit(main())

#!/usr/bin/python3

"""
A General-purpose UI to perform simple tasks.
"""

import os
import sys
from tslb.Architecture import architectures_reverse
from tslb import Architecture
# from tslb.build_pipeline import BuildPipeline
from tslb.package_builder import PackageBuilder
from tslb.Console import Color
from tslb import Console
from tslb.SourcePackage import SourcePackageList, SourcePackage
from tslb.SourcePackage import NoSuchSourcePackage, NoSuchSourcePackageVersion
from tslb import build_pipeline as bpp
import argparse
from tslb import filesystem as fs
from tslb import utils
from tslb import Graph
from tslb.CdepGraph import CdepGraph
from tslb import settings
from tslb.build_state import outdate_package_stage


def initially_create_locks(args):
    print (Color.YELLOW + "Creating locks ..." + Color.NORMAL)
    utils.initially_create_all_locks()
    print (Color.GREEN + "done." + Color.NORMAL)

def list_source_packages(args, arch):
    print ("Source packages:")
    print ("----------------------------------------------------------------")
    
    for name in SourcePackageList(Architecture.to_int(arch)).list_source_packages():
        print ("%s" % name)


def build_single_package(spname, sparch, spversion):
    # sp = SourcePackage(spname, sparch, write_intent=True)
    # spv = sp.get_version(spversion)
    # bp = BuildPipeline()
    #
    # if bp.build_source_package_version(spv):
    #     print(Color.GREEN + "Completed successfully." + Color.NORMAL)
    # else:
    #     print(Color.RED + "FAILED." + Color.NORMAL)

    pb = PackageBuilder('manual')

    try:
        pb.build_package(spname, sparch, spversion)
        print(Color.GREEN + "finished." + Color.NORMAL)

    except BaseException as e:
        print(Color.RED + "FAILED." + Color.NORMAL)
        raise e

    exit(0)


def outdate_package(name, arch, version, stage):
    try:
        outdate_package_stage(name, arch, version, stage)
        print(Color.GREEN + "finished." + Color.NORMAL)


    except NoSuchSourcePackage as e:
        print(str(e))
        exit(1)

    except NoSuchSourcePackageVersion as e:
        print(str(e))
        exit(1)

    except ValueError as e:
        print(str(e))
        exit(1)

    except BaseException as e:
        print(Color.RED + "FAILED." + Color.NORMAL)
        raise e


    exit(0)


def sync_buildpipeline_stages(args):
    bpp.sync_stages_with_db(report=True)

def mount(args):
    Console.print_status_box('Mounting filesystem')

    try:
        fs.mount()
    except:
        Console.update_status_box(False)
        raise
    else:
        Console.update_status_box(True)

def unmount(args):
    Console.print_status_box('Unmounting filesystem')

    try:
        fs.unmount()
    except:
        Console.update_status_box(False)
        raise
    else:
        Console.update_status_box(True)

def show_cdep_graph(arch, only_enabled):
    Console.print_status_box('Building cdep graph', file=sys.stderr)

    try:
        g = CdepGraph(arch)
        g.build(only_enabled=only_enabled)
        Console.update_status_box(True, file=sys.stderr)

    except:
        Console.update_status_box(False, file=sys.stderr)
        raise

    # import xdot, gi
    # gi.require_version('Gtk', '3.0')
    # from gi.repository import Gtk

    # win = xdot.DotWindow()
    # win.connect('delete-event', Gtk.main_quit)
    # win.set_dotcode(Graph.RenderGraphDot(g.nodes.values(), 'Cdep graph'))
    # Gtk.main()
    print(Graph.RenderGraphDot(g.nodes.values(), 'Cdep_graph').decode())

def main():
    parser = argparse.ArgumentParser(description=
            "A General-purpose UI to perform simple tasks."
            )

    subparsers = parser.add_subparsers(dest='command', required=True)

    # Different commands
    parser_icl = subparsers.add_parser('initially-create-locks', help='Initially create locks at the tclm.')
    parser_lsps = subparsers.add_parser('list-source-packages', help='List all source packages.')
    parser_lsps.add_argument('architecture')

    parser_bsp = subparsers.add_parser('build-single-package', help='Build a single source package\'s version.')
    parser_bsp.add_argument('spname')
    parser_bsp.add_argument('sparch')
    parser_bsp.add_argument('spversion', nargs='?', default=None)

    parser_sbps = subparsers.add_parser('sync-buildpipeline-stages', help='Sync the buildpipeline stages with the db.')
    parser_mount = subparsers.add_parser('mount', help='Mount the filesystem.')
    parser_unmount = subparsers.add_parser('unmount', help='Unmount the filesystem.')

    parser_show_cdep_graph = subparsers.add_parser('show-cdep-graph', help='Show the cdep graph.')
    parser_show_cdep_graph.add_argument('arch')
    parser_show_cdep_graph.add_argument(
        '--only-enabled', help='Include only packages with at least one enabled version.',
        action='store_true')

    parser_psql = subparsers.add_parser('psql', help='Launch a psql shell with TSLB\'s user, password and database.')

    parser_run_bash_in_image = subparsers.add_parser('run-bash-in-image', help='Start an interactive bash shell in the specified rootfs image')
    parser_run_bash_in_image.add_argument('img_id')

    parser_outdate_package = subparsers.add_parser('outdate-package', help='Outdate a stage of a single source package version')
    parser_outdate_package.add_argument('name')
    parser_outdate_package.add_argument('arch')
    parser_outdate_package.add_argument('version')
    parser_outdate_package.add_argument('stage')

    parser_list_stages = subparsers.add_parser('list-stages', help='Retrieve a list of all build pipeline stages')

    args = parser.parse_args()

    # Different commands
    if args.command == 'initially-create-locks':
        initially_create_locks(args)

    elif args.command == 'list-source-packages':
        list_source_packages(args, args.architecture)

    elif args.command == 'build-single-package':
        build_single_package(args.spname, Architecture.to_str(args.sparch), args.spversion)
    elif args.command == 'sync-buildpipeline-stages':
        sync_buildpipeline_stages(args)
    elif args.command == 'mount':
        mount(args)
    elif args.command == 'unmount':
        unmount(args)
    elif args.command == 'show-cdep-graph':
        if args.arch not in architectures_reverse:
            print("Invalid architecture `%s'" % args.arch)
            exit(1)

        arch = architectures_reverse[args.arch]
        show_cdep_graph(arch, args.only_enabled)

    elif args.command == 'psql':
        db_root = settings.get('Database')

        if not db_root:
            print("No database configuration defined.")
            exit(1)

        host = db_root.get('host')
        user = db_root.get('user')
        password = db_root.get('password')
        name = db_root.get('db_name')

        if not name:
            print("No database defined in system config file.")
            exit(1)

        argv = [ 'psql', '-d', name ]
        env = dict(os.environ)

        if host:
            argv += [ '-h', host ]

        if user:
            argv += [ '-U', user ]

            if password:
                env['PGPASSWORD'] = password

        os.execvpe('psql', argv, env)

    elif args.command == 'run-bash-in-image':
        try:
            ret_code = utils.run_bash_in_rootfs_image(args.img_id)
        except:
            raise

        exit(ret_code)


    elif args.command == 'outdate-package':
        outdate_package(args.name, args.arch, args.version, args.stage)


    elif args.command == 'list-stages':
        print("Build pipeline stages:")

        for s in bpp.all_stages:
            print("    %s" % s.name)

        print()
        exit(0)


if __name__ == '__main__':
    main()

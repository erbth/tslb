#!/usr/bin/python3

from tslb import settings
from tslb.build_node import BuildNode
from tslb.filesystem.FileOperations import mkdir_p
import asyncio
import os
import signal
import socket
import yamb_node

# Global variables to hold an always present state (even after tasks exit)
bn = None

def signal_handler(bn):
    loop = asyncio.get_running_loop()
    loop.create_task(bn.request_quit())

class LoopStopReason(object):
    def __init__(self, initial = 0):
        self.stop_code = initial

    def get_code(self):
        return self.stop_code

    def set_code(self, code):
        self.stop_code = code

async def init(loop, lsr, yamb_hub_transport_address, identity):
    global bn

    # Construct a build node.
    bn = BuildNode.BuildNode(loop, lsr, yamb_hub_transport_address, identity)
    loop.add_signal_handler(signal.SIGTERM, signal_handler, bn)
    loop.add_signal_handler(signal.SIGINT, signal_handler, bn)

    await bn.connect_to_yamb_hub()

def main():
    print ("TSClient LEGACY Build System Build Node - starting", flush=True)

    # Parse configuration data.
    if 'Yamb' not in settings:
        print('Missing section `Yamb\' in system configuration file.')
        return 1

    yamb_hub_transport_address = settings['Yamb'].get('hub', None)
    if not yamb_hub_transport_address:
        print ('No yamb hub transport address specified in the system configuration file.')
        return 1

    # Mount filesystem if it is not mounted already.

    loop = asyncio.new_event_loop()

    # We will need subprocesses
    asyncio.get_child_watcher().attach_loop(loop)

    lsr = LoopStopReason()

    # Find an identity for this build node
    lock_base = os.path.join('/', 'tmp', 'tslb_build_nodes')
    mkdir_p(lock_base)

    number = 0

    while True:
        try:
            os.close(os.open(os.path.join(lock_base, str(number)),
                os.O_RDONLY | os.O_CREAT | os.O_EXCL))

            break

        except FileExistsError:
            number += 1

            if number >= 65536:
                number = -1
                break


    if number < 0:
        print("Failed to find free node id number.")
        return 1


    identity = "%s:%d" % (socket.gethostname(), number)
    print ("Own identity: %s" % identity, flush=True)

    # Control flow changes into the loop
    loop.create_task(init(loop, lsr, yamb_hub_transport_address, identity))

    # The asyncio main loop - control over the loop is given to the BuildNode
    # object by now.
    loop.run_forever()

    # Remove the id number lock file
    os.unlink(os.path.join(lock_base, str(number)))

    return lsr.get_code()

if __name__ == '__main__':
    exit(main())
